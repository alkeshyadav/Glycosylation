clc
clear
%%
load('../../Data/Appendix8/validation.mat')

nE = 2;
nC = 2;
Nmax =180;

% 100 Target distribution generated by random rates 
I = [];
sigma = zeros(100,1);
sigma0 = zeros(100,1);
for i =1:100
    % rates and sigma obtained from the optimization
    mu = x_opt{i}(1:nC);
    R = reshape(x_opt{i}(nC+1:nC+nC*nE),[nE,nC]);
    l = reshape(x_opt{i}(nC+nC*nE+1:nC+2*nC*nE),[nE,nC]);
    sigma(i) = x_opt{i}(end);
    c = concen(x_opt{i},180,2,2);
    
    % True rates and sigma 
    mu0 = x(1:nC,i);
    R0 = reshape(x(nC+1:nC+nC*nE,i),[nE,nC]);
    l0 = reshape(x(nC+nC*nE+1:nC+2*nC*nE),[nE,nC]);
    sigma0(i) = x(end,i);
    c0 = concen(x(:,i),180,2,2);
    
    % weeding out the pathological cases
     if abs(c0(1)-1) >= 1e-1                         
        I = [I,i];     
     end   
end


%% Appendix 8 figure 1: Scatter Plot true sigma vs sigma obtained from the optimization


f1 = scatter(1:numel(I),sigma(I),'filled','r','LineWidth',3);
hold on
f2 = scatter(1:numel(I),sigma0(I),'d','MarkerEdgeColor','k','LineWidth',3);
xlabel('','Fontsize',25)
ylabel('\sigma','Fontsize',25)
legend('Obtained \sigma_{min}', 'True \sigma_{min}','location','bestoutside')
ax = gca;
ax.Box = 'off';
ax.FontSize = 20;
ax.LineWidth = 2;


print('validation_sigma','-dpng','-r300')
